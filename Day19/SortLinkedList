package com.day12to20;

class Node {
    int val;
    Node next;

    public Node(int val) {
        this.val = val;
        this.next = null;
    }
}

public class SortLinkedList {
    private Node root;

    public SortLinkedList() {
        this.root = null;
    }

    // Add at end
    public void addNewNode(int val) {
        Node n = new Node(val);
        if (this.root == null) {
            this.root = n;
            return;
        }
        Node temp = this.root;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = n;
    }

    // Display list
    public void display() {
        if (this.root == null) {
            System.out.println("List is empty");
            return;
        }
        Node temp = this.root;
        while (temp != null) {
            System.out.print(temp.val);
            if (temp.next != null)
                System.out.print("->");
            temp = temp.next;
        }
        System.out.println();
    }

    // --- Sorting Logic ---
    public void sortList() {
        this.root = mergeSort(this.root);
    }

    private Node mergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        // Find middle
        Node mid = getMiddle(head);
        Node nextOfMid = mid.next;
        mid.next = null;

        // Sort halves
        Node left = mergeSort(head);
        Node right = mergeSort(nextOfMid);

        // Merge sorted halves
        return merge(left, right);
    }

    private Node getMiddle(Node head) {
        if (head == null) return head;
        Node slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    private Node merge(Node a, Node b) {
        Node dummy = new Node(-1);
        Node tail = dummy;

        while (a != null && b != null) {
            if (a.val <= b.val) {
                tail.next = a;
                a = a.next;
            } else {
                tail.next = b;
                b = b.next;
            }
            tail = tail.next;
        }
        tail.next = (a != null) ? a : b;
        return dummy.next;
    }

    // --- Main driver ---
    public static void main(String[] args) {
        SortLinkedList sll = new SortLinkedList();
        sll.addNewNode(30);
        sll.addNewNode(10);
        sll.addNewNode(50);
        sll.addNewNode(20);
        sll.addNewNode(40);

        System.out.println("Before Sorting:");
        sll.display();

        sll.sortList();

        System.out.println("After Sorting:");
        sll.display();
    }
}
